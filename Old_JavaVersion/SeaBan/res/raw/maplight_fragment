precision mediump float;  

uniform vec3 u_LightPos;							
uniform sampler2D u_Texture;
uniform sampler2D u_TextureF;
varying vec4 v_Color; 
varying vec3 v_Coord; 
varying vec3 v_Normal;  
varying vec2 v_TexCoordinate;
varying mat4 v_MVMatrix;
uniform vec4 rocketsPos[30];


void main(){ 
	
	
	
	float distance;
	float diffuse;
	float diffuse2;
	float rDiffuse = 0.0;

	vec3 factureNormalBase = v_Normal * vec3(texture2D(u_TextureF, v_TexCoordinate));

	distance = length(u_LightPos - v_Coord) / 30.0; 
	vec3 lightVector = normalize(u_LightPos  - v_Coord); 
	diffuse2 = dot(factureNormalBase , lightVector);
	diffuse = diffuse2 * (1.0 / (1.0 + (0.1 * distance * distance)));
	diffuse += 0.4; 

	for (int i=0; i < 30; i++)
	{
	if (rocketsPos[i].w == 1.0)
	{
	distance = length(vec3(rocketsPos[i]) - v_Coord) / 10.0; 
	lightVector = normalize(vec3(rocketsPos[i]) - v_Coord); 
	diffuse2 = dot(factureNormalBase , lightVector);							  
	diffuse2 = diffuse2  * (1.0 / (1.0 + (0.1 * distance * distance)));
	rDiffuse += diffuse2;
	}
	}

	if (rDiffuse > 0.0) gl_FragColor = (vec4(rDiffuse, 0.0, 0.0, 1.0) + diffuse)  * texture2D(u_Texture, v_TexCoordinate);
	else
	gl_FragColor = diffuse * texture2D(u_Texture, v_TexCoordinate);
	

}